import { NextResponse } from 'next/server';
import jwt from 'jsonwebtoken';
import { serialize } from 'cookie';
import bcrypt from 'bcrypt'; // üëà 1. Import bcrypt
import pool from '../../../../lib/db'; // üëà 2. Import connection pool

export async function POST(request) {
    console.log("\n--- [API /customer-login] Checking JWT_SECRET ---");
    console.log("Value of process.env.JWT_SECRET:", process.env.JWT_SECRET);
    let connection;
    try {
        const { username, password } = await request.json();
        // --- Logic ‡πÉ‡∏´‡∏°‡πà: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
        connection = await pool.getConnection();

        // 3. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å email ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á users
        const [users] = await connection.execute(
            'SELECT * FROM users WHERE username = ?', [username]
            
        );

        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏à‡∏≠‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 (‡∏ã‡∏∂‡πà‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡∏¥‡∏î) ‡πÉ‡∏´‡πâ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
        if (users.length !== 1) {
            return NextResponse.json({ message: 'Invalid credentials' }, { status: 401 });
        }

        const user = users[0];

        // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡∏°‡∏µ role ‡πÄ‡∏õ‡πá‡∏ô 'customer' ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (user.role !== 'customer') {
            return NextResponse.json({ message: 'Access denied for this role' }, { status: 403 }); // 403 Forbidden
        }

        // 5. ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏Å‡∏±‡∏ö hash ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const passwordIsValid = await bcrypt.compare(password, user.password);

        if (!passwordIsValid) {
            return NextResponse.json({ message: 'Invalid credentials' }, { status: 401 });
        }
        // ---------------------------------------------

        // (‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Token ‡πÅ‡∏•‡∏∞ Cookie ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á)
        const token = jwt.sign(
            { id: user.id, username: user.username , email: user.email, role: user.role },
            process.env.JWT_SECRET,
            { expiresIn: '1h' }
        );

        const serializedCookie = serialize('auth-token', token, {
            httpOnly: true,
            secure: process.env.NODE_ENV !== 'development',
            sameSite: 'strict',
            maxAge: 60 * 60,
            path: '/',
        });

        const response = NextResponse.json({ message: 'Login successful' });
        response.headers.set('Set-Cookie', serializedCookie);
        
        return response;

    } catch (error) {
        console.error('Customer Login API error:', error);
        return NextResponse.json({ message: 'An internal server error occurred.' }, { status: 500 });
    } finally {
        if (connection) {
            connection.release(); // ‡∏Ñ‡∏∑‡∏ô connection ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà pool
        }
    }
}