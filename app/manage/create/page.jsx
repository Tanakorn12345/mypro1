"use client";
import Navbar from "../../components/Navbar"; // <-- Comment out temporarily
import Footer from "../../components/Footer"; // <-- Comment out temporarily
import { useState, useRef, useEffect } from "react"; // <-- ‡πÄ‡∏û‡∏¥‡πà‡∏° useRef, useEffect
import { useRouter } from "next/navigation"; // <-- Comment out temporarily
import { Loader2, Store, UploadCloud } from "lucide-react"; // <-- ‡πÄ‡∏û‡∏¥‡πà‡∏° UploadCloud

export default function CreateRestaurantPage() {
    const router = useRouter(); // <-- Comment out temporarily
    const fileInputRef = useRef(null); // <-- Ref ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö input file

    // State for the form
    const [form, setForm] = useState({
        name: "",
        description: "",
        opening_hours: "",
        phone: "",
        address: "",
    });
    const [submitting, setSubmitting] = useState(false);
    const [submitStatus, setSubmitStatus] = useState({ message: "", type: "" });

    // --- 1. ‡πÄ‡∏û‡∏¥‡πà‡∏° State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ---
    const [imageFile, setImageFile] = useState(null); // ‡πÄ‡∏Å‡πá‡∏ö File object
    const [imagePreview, setImagePreview] = useState(null); // ‡πÄ‡∏Å‡πá‡∏ö URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö preview

    // --- 4. Cleanup Object URL ---
    useEffect(() => {
        // Function ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ component unmount ‡∏´‡∏£‡∏∑‡∏≠ imagePreview ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ
        return () => {
          if (imagePreview && imagePreview.startsWith("blob:")) {
            URL.revokeObjectURL(imagePreview);
          }
        };
      }, [imagePreview]);


    const handleChange = (e) => {
        const { name, value } = e.target;
        setForm(prev => ({ ...prev, [name]: value }));
        setSubmitStatus({ message: "", type: "" });
    };

    // --- 3. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ---
    const handleImageChange = (e) => {
        const file = e.target.files?.[0];
        if (!file) return;

        // ‡∏•‡πâ‡∏≤‡∏á Object URL ‡πÄ‡∏Å‡πà‡∏≤ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if (imagePreview && imagePreview.startsWith("blob:")) {
            URL.revokeObjectURL(imagePreview);
        }

        const url = URL.createObjectURL(file); // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        setImageFile(file); // ‡πÄ‡∏Å‡πá‡∏ö File object
        setImagePreview(url); // ‡πÄ‡∏Å‡πá‡∏ö URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    };

    // --- 5. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï handleSubmit ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ FormData ---
    const handleSubmit = async (e) => {
        e.preventDefault();
        setSubmitting(true);
        setSubmitStatus({ message: "", type: "" });

        if (!form.name || !form.address || !form.phone) {
            setSubmitStatus({ message: "Please fill in all required fields.", type: "error" });
            setSubmitting(false);
            return;
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á FormData object
        const formData = new FormData();
        formData.append("name", form.name);
        formData.append("description", form.description);
        formData.append("opening_hours", form.opening_hours);
        formData.append("phone", form.phone);
        formData.append("address", form.address);
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if (imageFile) {
            formData.append("image", imageFile); // 'image' ‡∏Ñ‡∏∑‡∏≠ key ‡∏ó‡∏µ‡πà Backend ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå
        }

        try {
            console.log("--- Submitting Create Restaurant Form (with FormData) ---");
            // Log ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô FormData (‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á File ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á)
            for (let [key, value] of formData.entries()) {
                 console.log(`${key}: ${value instanceof File ? value.name : value}`); // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô File
            }

            // --- üëá ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Uncomment ‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ ---
            const res = await fetch('/api/restaurants', { // <-- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Path ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                method: 'POST',
                body: formData, // ‡∏™‡πà‡∏á FormData
                // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà headers Content-Type: application/json
            });

            if (!res.ok) {
                // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏≠‡πà‡∏≤‡∏ô Error message ‡∏à‡∏≤‡∏Å Backend (‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô JSON)
                let errorData = { message: "Failed to create restaurant. Status: " + res.status };
                try {
                   errorData = await res.json();
                } catch (jsonError) {
                   console.error("Could not parse error response as JSON", jsonError);
                   errorData.message = await res.text(); // ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô Text ‡πÅ‡∏ó‡∏ô‡∏ñ‡πâ‡∏≤ JSON ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
                }
                throw new Error(errorData.message || "Something went wrong.");
            }
            // --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡πà‡∏ß‡∏ô Uncomment ---

            // --- ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ---
            const result = await res.json(); // ‡∏≠‡πà‡∏≤‡∏ô response ‡∏à‡∏≤‡∏Å Backend
            console.log("Backend Response:", result);

            setSubmitStatus({ message: "Restaurant created successfully! Redirecting...", type: "success" });
            setTimeout(() => {
                // router.push("/manage"); // <-- Use this in real project
                console.log("Redirecting to /manage...");
                window.location.href = "/manage"; // Temporary redirect
            }, 2000);

        } catch (err) {
            console.error("Create Restaurant Error:", err);
            setSubmitStatus({ message: err.message || "Failed to create restaurant.", type: "error" });
            setSubmitting(false); // ‡∏´‡∏¢‡∏∏‡∏î Submitting ‡∏ñ‡πâ‡∏≤ Error
        }
        // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á setSubmitting(false) ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤ Redirect
    };

    return (
        <div className="min-h-screen bg-white">
            <Navbar /> 
            <div className="p-8 max-w-4xl mx-auto">
                <div className="flex items-center gap-3 mb-4">
                     <Store className="w-6 h-6 text-green-700" />
                     <h1 className="text-xl font-bold text-green-700">Restaurant Setup</h1>
                </div>
                <p className="text-gray-600 mb-6">Please provide your restaurant details to get started.</p>

                <form onSubmit={handleSubmit} className="bg-gray-100 p-8 rounded-2xl flex flex-col gap-6 shadow-inner">

                    {/* Restaurant Name */}
                    <div>
                        <label htmlFor="name" className="block font-semibold mb-1 text-gray-700">Restaurant Name *</label>
                        <input
                            type="text" id="name" name="name"
                            value={form.name} onChange={handleChange}
                            className="w-full bg-orange-50 rounded-full px-4 py-2 outline-none focus:ring-2 focus:ring-green-400"
                            required
                        />
                    </div>

                    {/* --- 2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á Upload ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û --- */}
                    <div>
                        <label className="block font-semibold mb-1 text-gray-700">Restaurant Image</label>
                        <input
                            type="file"
                            accept="image/*" // ‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                            ref={fileInputRef}
                            onChange={handleImageChange}
                            className="hidden" // ‡∏ã‡πà‡∏≠‡∏ô input file ‡∏à‡∏£‡∏¥‡∏á
                        />
                        {/* ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏´‡πâ User ‡∏Ñ‡∏•‡∏¥‡∏Å */}
                        <div
                            onClick={() => fileInputRef.current?.click()} // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà -> ‡πÑ‡∏õ‡∏™‡∏±‡πà‡∏á‡∏Ñ‡∏•‡∏¥‡∏Å input file
                            role="button"
                            tabIndex={0}
                            onKeyDown={(e) => { if (e.key === 'Enter' || e.key === ' ') fileInputRef.current?.click(); }}
                            className="mt-1 flex justify-center items-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md cursor-pointer hover:border-green-400 transition h-48"
                        >
                            {imagePreview ? (
                                <img src={imagePreview} alt="Restaurant preview" className="max-h-full max-w-full object-contain rounded" />
                            ) : (
                                <div className="space-y-1 text-center">
                                    <UploadCloud className="mx-auto h-12 w-12 text-gray-400" />
                                    <div className="flex text-sm text-gray-600">
                                        <p className="pl-1">Click to upload an image</p>
                                    </div>
                                    <p className="text-xs text-gray-500">PNG, JPG, GIF up to 10MB</p>
                                </div>
                            )}
                        </div>
                    </div>


                    {/* Description */}
                    <div>
                        <label htmlFor="description" className="block font-semibold mb-1 text-gray-700">Description</label>
                        <textarea
                            id="description" name="description"
                            value={form.description} onChange={handleChange}
                            rows={3}
                            className="w-full bg-orange-50 rounded-xl px-4 py-2 outline-none focus:ring-2 focus:ring-green-400"
                        />
                    </div>

                    {/* Opening Hours */}
                    <div>
                        <label htmlFor="opening_hours" className="block font-semibold mb-1 text-gray-700">Opening Hours (e.g., 10:00 - 22:00)</label>
                        <input
                            type="text" id="opening_hours" name="opening_hours"
                            value={form.opening_hours} onChange={handleChange}
                            className="w-full bg-orange-50 rounded-full px-4 py-2 outline-none focus:ring-2 focus:ring-green-400"
                        />
                    </div>

                    {/* Phone */}
                    <div>
                        <label htmlFor="phone" className="block font-semibold mb-1 text-gray-700">Phone Number *</label>
                        <input
                            type="tel" id="phone" name="phone"
                            value={form.phone} onChange={handleChange}
                            className="w-full bg-orange-50 rounded-full px-4 py-2 outline-none focus:ring-2 focus:ring-green-400"
                            required
                        />
                    </div>

                    {/* Address */}
                    <div>
                        <label htmlFor="address" className="block font-semibold mb-1 text-gray-700">Address *</label>
                        <textarea
                            id="address" name="address"
                            value={form.address} onChange={handleChange}
                            rows={3}
                            className="w-full bg-orange-50 rounded-xl px-4 py-2 outline-none focus:ring-2 focus:ring-green-400"
                            required
                        />
                    </div>


                    {/* Submit Status */}
                    {submitStatus.message && (
                        <div className={`p-3 rounded-lg text-center font-semibold ${
                            submitStatus.type === 'success'
                            ? 'bg-green-100 text-green-800'
                            : 'bg-red-100 text-red-800'
                        }`}>
                            {submitStatus.message}
                        </div>
                    )}

                    {/* Submit Button */}
                    <div className="flex justify-center mt-6">
                        <button
                            type="submit"
                            className="bg-green-500 text-white font-semibold px-12 py-3 rounded-full hover:bg-green-600 flex items-center justify-center disabled:opacity-60 w-full sm:w-auto"
                            disabled={submitting}
                        >
                            {submitting ? <Loader2 className="mr-2 h-5 w-5 animate-spin" /> : null}
                            {submitting ? "Creating Restaurant..." : "Create Restaurant"}
                        </button>
                    </div>
                </form>
            </div>
            <Footer /> 
        </div>
    );
}

